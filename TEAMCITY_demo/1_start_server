#!/bin/bash

# Doc for Team City First Start
# https://www.jetbrains.com/help/teamcity/quick-setup-guide.html#TeamCity+First+Start

# Doc for CyberArk Conjur plugin for Team City
# https://github.com/cyberark/conjur-teamcity-plugin

export TC_CONJUR_IDENTITY=tc_test2
export TC_SERVER_PVT_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
export TC_SERVER_PORT=8111
export TC_SERVER_HOST=$(aws ec2 describe-instances						\
	                | jq -r ".Reservations[].Instances[]					\
			| select(.PrivateIpAddress==\"$TC_SERVER_PVT_IP\").PublicDnsName")
export LAPTOP_IP_CIDR=108.95.0.0


main() {
  echo "Starting Team City server..."
#  start_server
  echo "Loading Conjur policy..."
  load_policy
  echo "Opening port $TC_SERVER_PORT on $TC_SERVER_HOST to CIDR to $LAPTOP_IP_CIDR..."
  open_ingress_for_tc_ui

  echo
  echo
  echo "TC Server UI: http://$TC_SERVER_HOST:8111"
  echo
  echo "Download the CyberArk Conjur plugin for Team City to your local host with this command:"
  echo "curl -O https://github.com/cyberark/conjur-teamcity-plugin/releases/download/v0.0.1/teamcity.zip"
}

#########################
start_server() {
  docker pull jetbrains/teamcity-server
  docker run -it -d 						\
	--name tc_server 					\
	-u root 						\
	-v /teamcity/data:/data/teamcity_server/datadir 	\
	-v /teamcity/logs:/opt/teamcity/logs			\
	-p $TC_SERVER_PORT:8111					\
	jetbrains/teamcity-server
}

#########################
load_policy() {
  found=$(cybr conjur list -k host | grep $TC_CONJUR_IDENTITY)
  if [[ "$found" == "" ]]; then
    cat tc_policy.template.yaml					\
      | sed -e "s#{{ TC_IDENTITY }}#$TC_CONJUR_IDENTITY#g"	\
      > tc_policy.yaml
    cybr conjur append-policy -b root -f tc_policy.yaml | tee identity.json
    return
  fi
  echo "Policy already loaded:"
  cat identity.json
}

#########################
open_ingress_for_tc_ui() {
  JUMPBOX_SG_ID=$(aws ec2 describe-security-groups        \
                | jq -r ".SecurityGroups[]
                        | select(.GroupName
                        | contains(\"jodylab-1-jumpbox\")).GroupId")

  aws ec2 authorize-security-group-ingress	\
	--group-id "$JUMPBOX_SG_ID"		\
	--protocol tcp				\
	--port $TC_SERVER_PORT			\
	--cidr $LAPTOP_IP_CIDR/16
}

main "$@"
