#!/bin/bash

source ../../../config/conjur.config
source ../../../bin/conjur_utils.sh

if [[ "$PLATFORM" == "openshift" ]]; then
  uname=$($CLI whoami 2> /dev/null)
  if [[ "$uname" != "user"* ]]; then
    echo "Please login as a lab user first."
    exit -1
    APP_NAMESPACE_NAME=$uname
  fi
else
  uname=$APP_NAMESPACE_NAME
fi

main() {
  CMD=$1
    case $CMD in
    y*)
        create_yaml_files
        ;;
    a*)
        deploy_app
        ;;
    l*)
	$CLI get pods -n $APP_NAMESPACE_NAME
        ;;
    e*)
        $CLI exec -it $($CLI get pods -n $APP_NAMESPACE_NAME | grep app-example-provider | grep Running | awk '{print $1}') -n $APP_NAMESPACE_NAME -- bash
        ;;
    u*)
        update_app
	;;
    d*)
        reset_lab
        ;;
    c*)
        reset_lab
        rm -f *.yaml
        ;;
    *)
        echo "Usage: $0 [ yaml | apply | list | exec | update | delete | clean ]"
        exit -1
  esac
  exit 0
}

########################
create_yaml_files() {
  echo "creating YAML files..."

  $CLI get cm conjur-config -n $CYBERARK_NAMESPACE_NAME -o yaml				\
  | sed "s/namespace: $CYBERARK_NAMESPACE_NAME/namespace: $APP_NAMESPACE_NAME/"	\
  > ./conjur-config-cm.yaml

  cat ./templates/k8s-provider-rolebinding.template.yaml	\
  | sed -e "s#{{ APP_NAMESPACE_NAME }}#$APP_NAMESPACE_NAME#g"	\
  > ./k8s-provider-rolebinding.yaml

  cat ./templates/db-credentials.template.yaml                  \
  | sed -e "s#{{ ACCOUNT_ADDRESS }}#$ACCOUNT_ADDRESS#g"         \
  | sed -e "s#{{ ACCOUNT_DATABASE }}#$ACCOUNT_DATABASE#g"       \
  | sed -e "s#{{ ACCOUNT_USERNAME }}#$ACCOUNT_USERNAME#g"       \
  | sed -e "s#{{ ACCOUNT_PASSWORD }}#$ACCOUNT_PASSWORD#g"       \
  > ./db-credentials.yaml

  cat ./templates/k8s-provider-policy.template.yaml		\
  | sed -e "s#{{ APP_NAMESPACE_NAME }}#$uname#g"		\
  | sed -e "s#{{ CLUSTER_AUTHN_ID }}#$CLUSTER_AUTHN_ID#g"	\
  | sed -e "s#{{ SECRETS_ACCESS_ROLE }}#$SECRETS_ACCESS_ROLE#g"	\
  > ./k8s-provider-policy.yaml

  cat ./templates/k8s-provider-job.template.yaml			\
  | sed -e "s#{{ APP_IMAGE }}#$APP_IMAGE#g"				\
  | sed -e "s#{{ SECRETS_PROVIDER_IMAGE }}#$SECRETS_PROVIDER_IMAGE#g"	\
  | sed -e "s#{{ APP_NAMESPACE_NAME }}#$APP_NAMESPACE_NAME#g"		\
  | sed -e "s#{{ CONJUR_AUTHN_URL }}#$CONJUR_AUTHN_URL#g"		\
  > ./k8s-provider-job.yaml

  cat ./templates/app-deployment.template.yaml				\
  | sed -e "s#{{ APP_IMAGE }}#$APP_IMAGE#g"				\
  | sed -e "s#{{ APP_NAMESPACE_NAME }}#$APP_NAMESPACE_NAME#g"		\
  > ./app-deployment.yaml

  cat ./templates/kustomization.template.yaml				\
  | sed -e "s#{{ APP_NAMESPACE_NAME }}#$APP_NAMESPACE_NAME#g"		\
  > ./kustomization.yaml
  kubectl kustomize ./ > ./reloader.yaml
  rm ./kustomization.yaml
}

########################
# apply manifests & policies that deploys app
deploy_app() {
  if [[ "$($CLI get cm conjur-config -n $APP_NAMESPACE_NAME --ignore-not-found)" == "" ]]; then
    $CLI apply -f ./conjur-config-cm.yaml -n $APP_NAMESPACE_NAME
  fi
  $CLI apply -f ./k8s-provider-rolebinding.yaml -n $APP_NAMESPACE_NAME
  $CLI apply -f ./db-credentials.yaml -n $APP_NAMESPACE_NAME
  conjur_append_policy $APP_NAMESPACE_NAME ./k8s-provider-policy.yaml delete

  $CLI apply -f ./k8s-provider-job.yaml -n $APP_NAMESPACE_NAME
  echo -n "Waiting for job to complete"
  finished="$($CLI get pods -n $APP_NAMESPACE_NAME | grep secrets-provider | grep -i Completed)"
  while [[ "$finished" == "" ]]; do
    echo -n "."
    sleep 2
    finished="$($CLI get pods -n $APP_NAMESPACE_NAME | grep secrets-provider | grep -i Completed)"
  done
  echo

  $CLI apply -f ./app-deployment.yaml -n $APP_NAMESPACE_NAME	# deploy app
#  $CLI apply -f ./reloader.yaml -n $APP_NAMESPACE_NAME		# deploy reloader 
}

########################
# refetch secrets and do patch app to trigger rolling upgrade
update_app() {
  # delete completed job
  $CLI delete -f ./k8s-provider-job.yaml -n $APP_NAMESPACE_NAME

  # apply new job to patch k8s secret
  $CLI apply -f ./k8s-provider-job.yaml -n $APP_NAMESPACE_NAME
}

########################
# delete any existing resources/deployments
reset_lab() {
  $CLI delete -f ./db-credentials.yaml -n $APP_NAMESPACE_NAME --ignore-not-found
  $CLI delete --grace-period=1 -f ./app-deployment.yaml -n $APP_NAMESPACE_NAME --ignore-not-found
  $CLI delete --grace-period=1 -f ./k8s-provider-cronjob.yaml -n $APP_NAMESPACE_NAME --ignore-not-found
  $CLI delete -f ./k8s-provider-rolebinding.yaml -n $APP_NAMESPACE_NAME --ignore-not-found
  $CLI delete -f ./reloader.yaml -n $APP_NAMESPACE_NAME --ignore-not-found
  $CLI delete job.batch/secrets-provider -n $APP_NAMESPACE_NAME --ignore-not-found
}

main "$@"
